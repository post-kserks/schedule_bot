# schedule.py
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from database import db

logger = logging.getLogger(__name__)

class Subject:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    def __init__(self, name: str, room: str, start_time: str, end_time: str, lesson_type: str):
        self.name = name
        self.room = room
        self.start_time = start_time
        self.end_time = end_time
        self.lesson_type = lesson_type
    
    def __str__(self):
        return f"{self.name} {self.room} {self.start_time} - {self.end_time} ({self.lesson_type})"

class DaySchedule:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"""
    def __init__(self, day_name: str, subjects: List[Subject]):
        self.day_name = day_name
        self.subjects = subjects
    
    def __str__(self):
        result = f"{self.day_name}\n"
        for i, subject in enumerate(self.subjects, 1):
            result += f"{subject}\n"
        return result

class ScheduleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    
    def __init__(self):
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è
        self.numerator_schedule = self._parse_numerator_schedule()
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è
        self.denominator_schedule = self._parse_denominator_schedule()
        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å
        self.semester_start = datetime(2024, 9, 1)  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    
    def _parse_numerator_schedule(self) -> Dict[str, DaySchedule]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è"""
        return {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": DaySchedule("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", [
                Subject("–ø—Ä–∞–∫—Ç–∏–∫–∞ –∏—É5", "903", "10:10", "11:40", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–ø—Ä–∞–∫—Ç–∏–∫–∞ –∏—É5", "903", "11:50", "13:55", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è")
            ]),
            "–≤—Ç–æ—Ä–Ω–∏–∫": DaySchedule("–≤—Ç–æ—Ä–Ω–∏–∫", [
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "301—Ö", "10:10", "11:40", "–ª–µ–∫—Ü–∏—è"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "524–∫", "12:25", "13:55", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"),
                Subject("–∏—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "618–∫", "14:05", "15:35", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "639–∫", "15:55", "17:25", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—Å—Ä–µ–¥–∞": DaySchedule("—Å—Ä–µ–¥–∞", [
                Subject("–Ω–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "1113–ª, 1111–ª", "8:30", "10:00", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–Ω–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "216–ª", "10:10", "11:40", "–ª–µ–∫—Ü–∏—è"),
                Subject("—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è", "216–ª", "11:50", "13:55", "–ª–µ–∫—Ü–∏—è"),
                Subject("—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞", "–°–ö", "14:30", "16:00", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—á–µ—Ç–≤–µ—Ä–≥": DaySchedule("—á–µ—Ç–≤–µ—Ä–≥", [
                Subject("–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "211—Ö, 305—Ö", "10:10", "11:40", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "114—Ö", "11:50", "13:55", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è")
            ]),
            "–ø—è—Ç–Ω–∏—Ü–∞": DaySchedule("–ø—è—Ç–Ω–∏—Ü–∞", [
                Subject("—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–°–ö", "13:55", "15:30", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "601–∫", "15:55", "17:25", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "540–∫", "17:35", "19:05", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—Å—É–±–±–æ—Ç–∞": DaySchedule("—Å—É–±–±–æ—Ç–∞", [
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "536–∫", "8:30", "10:00", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è", "537–∫", "10:10", "11:40", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "532–∫", "12:25", "13:55", "—Å–µ–º–∏–Ω–∞—Ä")
            ])
        }
    
    def _parse_denominator_schedule(self) -> Dict[str, DaySchedule]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è"""
        return {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": DaySchedule("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", [
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è"),
                Subject("–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è")
            ]),
            "–≤—Ç–æ—Ä–Ω–∏–∫": DaySchedule("–≤—Ç–æ—Ä–Ω–∏–∫", [
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "301—Ö", "10:10", "11:40", "–ª–µ–∫—Ü–∏—è"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "524–∫", "12:25", "13:55", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"),
                Subject("–∏—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "618–∫", "14:05", "15:35", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—Å—Ä–µ–¥–∞": DaySchedule("—Å—Ä–µ–¥–∞", [
                Subject("–Ω–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "1113–ª, 1111–ª", "8:30", "10:00", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–Ω–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "216–ª", "10:10", "11:40", "–ª–µ–∫—Ü–∏—è"),
                Subject("–∏—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "216–ª", "11:50", "13:55", "–ª–µ–∫—Ü–∏—è"),
                Subject("—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞", "–°–ö", "14:30", "16:00", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—á–µ—Ç–≤–µ—Ä–≥": DaySchedule("—á–µ—Ç–≤–µ—Ä–≥", [
                Subject("–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "211—Ö, 305—Ö", "10:10", "11:40", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "114—Ö", "11:50", "13:55", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è", "301—Ö", "14:05", "15:35", "–ª–µ–∫—Ü–∏—è")
            ]),
            "–ø—è—Ç–Ω–∏—Ü–∞": DaySchedule("–ø—è—Ç–Ω–∏—Ü–∞", [
                Subject("—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–°–ö", "13:55", "15:30", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "601–∫", "15:55", "17:25", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞"),
                Subject("–æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "540–∫", "17:35", "19:05", "—Å–µ–º–∏–Ω–∞—Ä")
            ]),
            "—Å—É–±–±–æ—Ç–∞": DaySchedule("—Å—É–±–±–æ—Ç–∞", [
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "536–∫", "8:30", "10:00", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è", "537–∫", "10:10", "11:40", "—Å–µ–º–∏–Ω–∞—Ä"),
                Subject("–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "532–∫", "12:25", "13:55", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
            ])
        }
    
    def is_numerator_week(self, date: datetime = None) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–µ–¥–µ–ª—è —á–∏—Å–ª–∏—Ç–µ–ª–µ–º"""
        if date is None:
            date = datetime.now()
        
        # –†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
        delta = date - self.semester_start
        week_number = delta.days // 7
        
        # –ß–µ—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ - —á–∏—Å–ª–∏—Ç–µ–ª—å, –Ω–µ—á–µ—Ç–Ω—ã–µ - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç—É –ª–æ–≥–∏–∫—É –ø–æ–¥ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        return week_number % 2 == 0
    
    def get_day_schedule(self, date: datetime = None) -> Optional[DaySchedule]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        if date is None:
            date = datetime.now()
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days_russian = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_name = days_russian[date.weekday()]
        
        # –í—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
        if self.is_numerator_week(date):
            schedule = self.numerator_schedule
        else:
            schedule = self.denominator_schedule
        
        return schedule.get(day_name)
    
    def format_schedule_for_day(self, date: datetime = None, include_control_events: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
        day_schedule = self.get_day_schedule(date)
        if not day_schedule:
            return "üéâ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        control_events = {}
        if include_control_events:
            date_str = date.strftime("%Y-%m-%d")
            events = db.get_control_events_by_date(date_str)
            for subject_name, event_type in events:
                control_events[subject_name] = event_type
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π —Å —ç–º–æ–¥–∑–∏
        day_emojis = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "–≤—Ç–æ—Ä–Ω–∏–∫": "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", 
            "—Å—Ä–µ–¥–∞": "üìÖ –°—Ä–µ–¥–∞",
            "—á–µ—Ç–≤–µ—Ä–≥": "üìÖ –ß–µ—Ç–≤–µ—Ä–≥",
            "–ø—è—Ç–Ω–∏—Ü–∞": "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
            "—Å—É–±–±–æ—Ç–∞": "üìÖ –°—É–±–±–æ—Ç–∞"
        }
        
        day_display = day_emojis.get(day_schedule.day_name, day_schedule.day_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –Ω–µ–¥–µ–ª–∏
        week_type = "–ß–∏—Å–ª–∏—Ç–µ–ª—å" if self.is_numerator_week(date) else "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
        
        result = f"{day_display} ({week_type})\n\n"
        
        for i, subject in enumerate(day_schedule.subjects, 1):
            event_mark = ""
            if subject.name in control_events:
                event_mark = f" üö® {control_events[subject.name]}"
            
            result += f"üïí {subject.start_time}-{subject.end_time}\n"
            result += f"üìö {subject.name}\n"
            result += f"üè´ {subject.room}\n"
            result += f"üìù {subject.lesson_type}{event_mark}\n"
            
            if i < len(day_schedule.subjects):
                result += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        return result
    
    def get_week_schedule(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏
            current_date = datetime.now()
            is_numerator = self.is_numerator_week(current_date)
            week_type = "–ß–∏—Å–ª–∏—Ç–µ–ª—å" if is_numerator else "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
            schedule = self.numerator_schedule if is_numerator else self.denominator_schedule
            
            # –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            days_order = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
            
            result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_type})\n\n"
            
            for day_name in days_order:
                day_schedule = schedule.get(day_name)
                if not day_schedule or not day_schedule.subjects:
                    continue
                
                # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π —Å —ç–º–æ–¥–∑–∏
                day_emojis = {
                    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                    "–≤—Ç–æ—Ä–Ω–∏–∫": "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", 
                    "—Å—Ä–µ–¥–∞": "üìÖ –°—Ä–µ–¥–∞",
                    "—á–µ—Ç–≤–µ—Ä–≥": "üìÖ –ß–µ—Ç–≤–µ—Ä–≥",
                    "–ø—è—Ç–Ω–∏—Ü–∞": "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                    "—Å—É–±–±–æ—Ç–∞": "üìÖ –°—É–±–±–æ—Ç–∞"
                }
                
                day_display = day_emojis.get(day_name, day_name)
                result += f"{day_display}:\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                day_date = self._get_date_for_weekday(day_name, current_date)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                control_events = {}
                date_str = day_date.strftime("%Y-%m-%d")
                events = db.get_control_events_by_date(date_str)
                for subject_name, event_type in events:
                    control_events[subject_name] = event_type
                
                for i, subject in enumerate(day_schedule.subjects, 1):
                    event_mark = ""
                    if subject.name in control_events:
                        event_mark = f" üö® {control_events[subject.name]}"
                    
                    result += f"  {i}. {subject.name}\n"
                    result += f"     ‚è∞ {subject.start_time}-{subject.end_time}\n"
                    result += f"     üè´ {subject.room} ({subject.lesson_type}){event_mark}\n"
                
                result += "\n"
            
            if result == f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_type})\n\n":
                result = "üéâ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
                
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
    
    def _get_date_for_weekday(self, weekday: str, reference_date: datetime) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
        weekday_indices = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
            "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
            "—Å—Ä–µ–¥–∞": 2,
            "—á–µ—Ç–≤–µ—Ä–≥": 3,
            "–ø—è—Ç–Ω–∏—Ü–∞": 4,
            "—Å—É–±–±–æ—Ç–∞": 5,
            "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
        }
        
        target_index = weekday_indices.get(weekday, 0)
        current_index = reference_date.weekday()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        days_difference = target_index - current_index
        if days_difference < 0:
            days_difference += 7
            
        return reference_date + timedelta(days=days_difference)
    
    def get_tomorrow_schedule(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = datetime.now() + timedelta(days=1)
        return self.format_schedule_for_day(tomorrow)
    
    def get_today_schedule(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        return self.format_schedule_for_day(datetime.now())
    
    def get_subjects_with_times(self, date: datetime = None) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        day_schedule = self.get_day_schedule(date)
        if not day_schedule:
            return []
        
        subjects_with_times = []
        for subject in day_schedule.subjects:
            subjects_with_times.append({
                'name': subject.name,
                'start_time': subject.start_time,
                'end_time': subject.end_time,
                'room': subject.room,
                'type': subject.lesson_type
            })
        
        return subjects_with_times

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_manager = ScheduleManager()