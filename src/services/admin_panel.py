# services/admin_panel.py
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from src.services.database import db
from src.utils.config import ADMIN_USERNAME_LIST
from src.utils.keyboards import get_admin_menu_keyboard

logger = logging.getLogger(__name__)

class AdminPanel:
    def __init__(self):
        self.waiting_for_event_data = {}
        self.waiting_for_broadcast = set()
    
    def is_user_admin(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if not username:
            return False
        clean_username = username.lstrip('@')
        return clean_username in ADMIN_USERNAME_LIST
    
    async def admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            user = update.effective_user
            
            if not self.is_user_admin(user.username):
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
                return
            
            reply_markup = get_admin_menu_keyboard()
            
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(
                    "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.edit_text(
                    "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_menu: {e}")
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            user = update.effective_user
            if not self.is_user_admin(user.username):
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
                return
            
            data = query.data
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ª—é–±–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
            if data in ["admin_back_to_menu", "admin_back_to_schedule"]:
                if user.id in self.waiting_for_event_data:
                    del self.waiting_for_event_data[user.id]
                if user.id in self.waiting_for_broadcast:
                    self.waiting_for_broadcast.discard(user.id)
            
            if data == "admin_list_events":
                await self._list_events(update, context)
            elif data == "admin_add_event":
                await self._start_add_event(update, context)
            elif data == "admin_delete_event":
                await self._start_delete_event(update, context)
            elif data == "admin_list_admins":
                await self._list_admins(update, context)
            elif data == "admin_broadcast_message":
                await self._start_broadcast_message(update, context)
            elif data.startswith("delete_event_"):
                event_id = int(data.split("_")[2])
                await self._confirm_delete_event(update, context, event_id)
            elif data.startswith("confirm_delete_"):
                event_id = int(data.split("_")[2])
                await self._execute_delete_event(update, context, event_id)
            elif data == "admin_back_to_schedule":
                await self._back_to_schedule(update, context)
            elif data == "admin_back_to_menu":
                await self.admin_menu(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")
            try:
                query = update.callback_query
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            except:
                pass
    
    async def _list_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        try:
            query = update.callback_query
            events = db.get_all_control_events()
            
            if not events:
                await query.edit_message_text(
                    "üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
                    ])
                )
                return
            
            events_text = "üìã –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
            for event in events:
                event_id, date, subject, event_type, created_by = event
                events_text += f"üÜî ID: {event_id}\n"
                events_text += f"üìÖ –î–∞—Ç–∞: {date}\n"
                events_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                events_text += f"üéØ –¢–∏–ø: {event_type}\n"
                events_text += f"üë§ –î–æ–±–∞–≤–∏–ª: {created_by or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                events_text += "‚îÄ" * 30 + "\n"
            
            await query.edit_message_text(
                events_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _list_events: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    
    async def _list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            query = update.callback_query
            
            if not ADMIN_USERNAME_LIST:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
                    ])
                )
                return
            
            admin_info = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            
            for i, username in enumerate(ADMIN_USERNAME_LIST, 1):
                admin_info += f"{i}. @{username}\n"
            
            admin_info += f"\nüìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_USERNAME_LIST)}"
            
            await query.edit_message_text(
                admin_info,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _list_admins: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    async def _start_add_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        try:
            query = update.callback_query
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = query.from_user.id
            self.waiting_for_event_data[user_id] = {"step": "waiting_for_date"}
            
            await query.edit_message_text(
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-01-20):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back_to_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _start_add_event: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    
    async def _start_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            query = update.callback_query
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            user_id = query.from_user.id
            self.waiting_for_broadcast.add(user_id)
            
            await query.edit_message_text(
                "üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back_to_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _start_broadcast_message: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    async def _start_delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        try:
            query = update.callback_query
            events = db.get_all_control_events()
            
            if not events:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
                    ])
                )
                return
            
            keyboard = []
            for event in events:
                event_id, date, subject, event_type, _ = event
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå {date} - {subject}",
                        callback_data=f"delete_event_{event_id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")])
            
            await query.edit_message_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _start_delete_event: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    async def _confirm_delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        try:
            query = update.callback_query
            events = db.get_all_control_events()
            event_to_delete = None
            
            for event in events:
                if event[0] == event_id:
                    event_to_delete = event
                    break
            
            if not event_to_delete:
                await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            _, date, subject, event_type, _ = event_to_delete
            
            await query.edit_message_text(
                f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:\n\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"üéØ –¢–∏–ø: {event_type}\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{event_id}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="admin_back_to_menu")
                    ]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _confirm_delete_event: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    
    async def _execute_delete_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        try:
            query = update.callback_query
            
            if db.delete_control_event(event_id):
                await query.edit_message_text(
                    "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back_to_menu")]
                    ])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_back_to_menu")]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _execute_delete_event: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    
    async def _execute_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = db.get_all_users()
            
            if not users:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            success_count = 0
            fail_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            progress_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            for user_id in users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
                    )
                    success_count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    fail_count += 1
            
            report_text = (
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
            )
            
            await progress_msg.edit_text(report_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    
    async def _back_to_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            query = update.callback_query
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            user_id = query.from_user.id
            if user_id in self.waiting_for_event_data:
                del self.waiting_for_event_data[user_id]
            if user_id in self.waiting_for_broadcast:
                self.waiting_for_broadcast.discard(user_id)
            
            await query.edit_message_text("üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from src.handlers.user_handlers import ScheduleBot
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            temp_bot = ScheduleBot("dummy_token")
            user = query.from_user
            
            if self.is_user_admin(user.username):
                keyboard = temp_bot.get_admin_keyboard()
            else:
                keyboard = temp_bot.get_main_keyboard()
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _back_to_schedule: {e}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    
    async def handle_admin_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            user = update.effective_user
            
            if not self.is_user_admin(user.username):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
                return
            
            user_id = user.id
            message_text = update.message.text
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            if user_id in self.waiting_for_broadcast:
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
                self.waiting_for_broadcast.discard(user_id)
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                await self._execute_broadcast_message(update, context, message_text)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
                await self.admin_menu(update, context)
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if user_id in self.waiting_for_event_data:
                step_data = self.waiting_for_event_data[user_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                if message_text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–∞–∑–∞–¥']:
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    del self.waiting_for_event_data[user_id]
                    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                    await self.admin_menu(update, context)
                    return
                
                if step_data["step"] == "waiting_for_date":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                    try:
                        datetime.strptime(message_text, "%Y-%m-%d")
                        step_data["date"] = message_text
                        step_data["step"] = "waiting_for_subject"
                        await update.message.reply_text("üìö –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
                    except ValueError:
                        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
                
                elif step_data["step"] == "waiting_for_subject":
                    if not message_text.strip():
                        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
                        return
                    
                    step_data["subject"] = message_text.strip()
                    step_data["step"] = "waiting_for_event_type"
                    await update.message.reply_text("üéØ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞'):")
                
                elif step_data["step"] == "waiting_for_event_type":
                    if not message_text.strip():
                        await update.message.reply_text("‚ùå –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
                        return
                    
                    step_data["event_type"] = message_text.strip()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î
                    event_id = db.add_control_event(
                        step_data["date"],
                        step_data["subject"],
                        step_data["event_type"],
                        user.username
                    )
                    
                    if event_id:
                        await update.message.reply_text(
                            f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                            f"üìÖ –î–∞—Ç–∞: {step_data['date']}\n"
                            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {step_data['subject']}\n"
                            f"üéØ –¢–∏–ø: {step_data['event_type']}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    del self.waiting_for_event_data[user_id]
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                    await self.admin_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_panel = AdminPanel()