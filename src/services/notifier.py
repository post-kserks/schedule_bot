# services/notifier.py
import logging
import asyncio
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from src.services.schedule_manager import schedule_manager
from src.services.database import db
from src.utils.keyboards import get_main_keyboard

logger = logging.getLogger(__name__)

class Notifier:
    def __init__(self, application):
        self.application = application
        self.job_queue = application.job_queue
    
    async def send_daily_schedule(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            now_utc = datetime.utcnow()
            now_moscow = now_utc + timedelta(hours=3)  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
            logger.info(f"üïò –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í—Ä–µ–º—è: UTC {now_utc.strftime('%H:%M')}, Moscow {now_moscow.strftime('%H:%M')}")
            
            tomorrow_schedule = schedule_manager.get_tomorrow_schedule()
            users = db.get_all_users()
            
            if not users:
                logger.info("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return
            
            logger.info(f"üì§ –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            
            reply_markup = get_main_keyboard()
            success_count = 0
            fail_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            if users:
                try:
                    await context.bot.send_message(
                        chat_id=users[0],
                        text=f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
                    )
                except:
                    pass
            
            for user_id in users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=tomorrow_schedule,
                        reply_markup=reply_markup
                    )
                    success_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    await asyncio.sleep(0.1)
                except TelegramError as e:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    fail_count += 1
                    if "bot was blocked" in str(e).lower():
                        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_msg = f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ {success_count}, –ù–µ —É–¥–∞–ª–æ—Å—å {fail_count}"
            logger.info(result_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if users and success_count > 0:
                try:
                    await context.bot.send_message(
                        chat_id=users[0],
                        text=result_msg
                    )
                except:
                    pass
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    async def check_upcoming_lessons(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            now_utc = datetime.utcnow()
            now_moscow = now_utc + timedelta(hours=3)
            current_time = now_moscow.strftime("%H:%M")
            current_date = now_moscow.strftime("%Y-%m-%d")
            
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π: Moscow {current_time}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            subjects = schedule_manager.get_subjects_with_times(now_moscow)
            
            if not subjects:
                logger.debug("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
                return
            
            for subject in subjects:
                start_time = subject['start_time']
                subject_name = subject['name']
                room = subject['room']
                lesson_type = subject['type']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ (–≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
                start_dt = datetime.strptime(start_time, "%H:%M")
                reminder_time = (start_dt - timedelta(minutes=10)).strftime("%H:%M")
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if current_time == reminder_time:
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                        f"–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è:\n"
                        f"üìö {subject_name}\n"
                        f"üè´ {room}\n"
                        f"üìù {lesson_type}\n"
                        f"‚è∞ {start_time}"
                    )
                    
                    logger.info(f"‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {subject_name} –≤ {start_time}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    users = db.get_all_users()
                    success_count = 0
                    fail_count = 0
                    
                    for user_id in users:
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message
                            )
                            success_count += 1
                            await asyncio.sleep(0.1)
                        except TelegramError as e:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            fail_count += 1
                    
                    logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ {success_count}, –ù–µ —É–¥–∞–ª–æ—Å—å {fail_count}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {e}")
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            if not self.job_queue:
                logger.error("‚ùå JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
                return
            
            logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
            for job in self.job_queue.jobs():
                self.job_queue.scheduler.remove_job(job.id)
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 21:00 –ø–æ –ú–æ—Å–∫–≤–µ
            # –í Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ TZ=Europe/Moscow, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            self.job_queue.run_daily(
                self.send_daily_schedule,
                time=datetime.strptime("21:00", "%H:%M").time(),  # 21:00 Moscow Time
                name="daily_schedule",
                days=tuple(range(7))  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            )
            logger.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ 'daily_schedule' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ 21:00 Moscow Time")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            self.job_queue.run_repeating(
                self.check_upcoming_lessons,
                interval=60,  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
                first=5,      # –ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                name="lesson_reminders"
            )
            logger.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ 'lesson_reminders' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.job_queue.run_once(
                self._test_notification,
                when=60,  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
                name="test_notification"
            )
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ 'test_notification' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ daily_schedule
            for job in self.job_queue.jobs():
                if job.name == "daily_schedule":
                    logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {job.next_t}")
            
            logger.info("üéØ –í—Å–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
    
#    async def _test_notification(self, context: ContextTypes.DEFAULT_TYPE):
#        """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
#        try:
#            now_utc = datetime.utcnow()
#            now_moscow = now_utc + timedelta(hours=3)
#            logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. Moscow time: {now_moscow.strftime('%Y-%m-%d %H:%M:%S')}")
#            
#            users = db.get_all_users()
#            if users:
#                test_message = (
#                    "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
#                    f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {now_moscow.strftime('%Y-%m-%d %H:%M:%S')}\n"
#                    "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
#                    "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
#                    "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
#                    "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
#                    "üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 21:00"
#                )
#                
#                await context.bot.send_message(
#                    chat_id=users[0],  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#                    text=test_message
#                )
#                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
#            else:
#                logger.info("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
#                
#        except Exception as e:
#            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")