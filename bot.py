# bot.py
import logging
from datetime import datetime
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN, ADMIN_USERNAME_LIST
from database import db
from schedule import schedule_manager
from notifier import Notifier
from admin import admin_panel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class ScheduleBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.notifier = Notifier(self.application)
    
    def is_user_admin(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return admin_panel.is_user_admin(username)
    
    def get_main_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_admin_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = [
            [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user = update.effective_user
            db.add_user(user.id, user.username, user.first_name, user.last_name)
            
            welcome_text = (
                "üìö –ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
                "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å:\n"
                "‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00\n"
                "‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
            )
            
            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.is_user_admin(user.username):
                keyboard = self.get_admin_keyboard()
                welcome_text += "\n\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            else:
                keyboard = self.get_main_keyboard()
            
            await update.message.reply_text(welcome_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.help(update, context)
        
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìÖ –°–µ–≥–æ–¥–Ω—è - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üìÜ –ó–∞–≤—Ç—Ä–∞ - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
üìÖ –ù–µ–¥–µ–ª—è - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
‚ùì –ü–æ–º–æ—â—å - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if hasattr(update, 'message') and update.message:
            user = update.effective_user
            if self.is_user_admin(user.username):
                keyboard = self.get_admin_keyboard()
            else:
                keyboard = self.get_main_keyboard()
            await update.message.reply_text(help_text, reply_markup=keyboard)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(help_text)
    
    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today"""
        await self.today(update, context)
        
    async def today(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            current_date = datetime.now()
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {current_date}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_date.weekday()}")
            
            schedule_text = schedule_manager.get_today_schedule()
            
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if hasattr(update, 'message') and update.message:
                user = update.effective_user
                if self.is_user_admin(user.username):
                    keyboard = self.get_admin_keyboard()
                else:
                    keyboard = self.get_main_keyboard()
                await update.message.reply_text(schedule_text, reply_markup=keyboard)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(schedule_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(error_msg)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(error_msg)
    
    async def tomorrow_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow"""
        await self.tomorrow(update, context)
        
    async def tomorrow(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        try:
            schedule_text = schedule_manager.get_tomorrow_schedule()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if hasattr(update, 'message') and update.message:
                user = update.effective_user
                if self.is_user_admin(user.username):
                    keyboard = self.get_admin_keyboard()
                else:
                    keyboard = self.get_main_keyboard()
                await update.message.reply_text(schedule_text, reply_markup=keyboard)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(schedule_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tomorrow: {e}")
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(error_msg)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(error_msg)
    
    async def week_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week"""
        await self.week(update, context)
        
    async def week(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            week_schedule = schedule_manager.get_week_schedule()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            if hasattr(update, 'message') and update.message:
                user = update.effective_user
                if self.is_user_admin(user.username):
                    keyboard = self.get_admin_keyboard()
                else:
                    keyboard = self.get_main_keyboard()
                await update.message.reply_text(week_schedule, reply_markup=keyboard)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(week_schedule)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é."
            if hasattr(update, 'message') and update.message:
                await update.message.reply_text(error_msg)
            elif hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(error_msg)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        await self.admin(update, context)
        
    async def admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE = None):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user = update.effective_user
        
        if not self.is_user_admin(user.username):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        await update.message.reply_text("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...", reply_markup=ReplyKeyboardRemove())
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await admin_panel.admin_menu(update, context)
    
    async def get_my_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        is_admin = self.is_user_admin(user.username)
        
        admin_status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "‚ùå –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        message = (
            f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üÜî ID: `{user.id}`\n"
            f"üìõ Username: @{user.username or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üìù –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"üîê –°—Ç–∞—Ç—É—Å: {admin_status}\n\n"
        )
        
        if is_admin:
            message += "–î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
        else:
            message += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ–∫—É—â–∏–º –∞–¥–º–∏–Ω–∞–º"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        user = update.effective_user
        text = update.message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}: {text}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
        if self.is_user_admin(user.username) and user.id in admin_panel.waiting_for_event_data:
            await admin_panel.handle_admin_message(update, context)
            return
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            await self.today(update, context)
        elif text == "üìÜ –ó–∞–≤—Ç—Ä–∞":
            await self.tomorrow(update, context)
        elif text == "üìÖ –ù–µ–¥–µ–ª—è":
            await self.week(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help(update, context)
        elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            if self.is_user_admin(user.username):
                await self.admin(update, context)
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            await self.help(update, context)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await admin_panel.handle_admin_callback(update, context)
    
    def run(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("today", self.today_command))
        self.application.add_handler(CommandHandler("tomorrow", self.tomorrow_command))
        self.application.add_handler(CommandHandler("week", self.week_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CommandHandler("myinfo", self.get_my_info))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        self.notifier.setup_jobs()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    try:
        bot = ScheduleBot(BOT_TOKEN)
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")