# test_bot.py
import asyncio
import logging
from database import db
from schedule import schedule_manager
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_all_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞...\n")
    
    # 1. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        test_date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        event_id = db.add_control_event(test_date, "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "test")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        events = db.get_control_events_by_date(test_date)
        if events:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        db.delete_control_event(event_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
    
    # 2. –¢–µ—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    try:
        today_schedule = schedule_manager.get_today_schedule()
        tomorrow_schedule = schedule_manager.get_tomorrow_schedule()
        
        if today_schedule and tomorrow_schedule:
            print("‚úÖ –ú–æ–¥—É–ª—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –°–µ–≥–æ–¥–Ω—è: {len(today_schedule)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ó–∞–≤—Ç—Ä–∞: {len(tomorrow_schedule)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    # 3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏...")
    try:
        is_num = schedule_manager.is_numerator_week()
        week_type = "–ß–∏—Å–ª–∏—Ç–µ–ª—å" if is_num else "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_type}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏: {e}")
    
    # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    try:
        subjects = schedule_manager.get_subjects_with_times()
        if subjects:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            for subj in subjects[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"   - {subj['name']} –≤ {subj['start_time']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_all_functionality())