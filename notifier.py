# notifier.py
import logging
import asyncio
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from telegram import KeyboardButton, ReplyKeyboardMarkup
from schedule import schedule_manager
from database import db

logger = logging.getLogger(__name__)

class Notifier:
    def __init__(self, application):
        self.application = application
        self.job_queue = application.job_queue
    
    # notifier.py (–æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ send_daily_schedule)
    async def send_daily_schedule(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            tomorrow_schedule = schedule_manager.get_tomorrow_schedule()
            users = db.get_all_users()
            
            if not users:
                logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π)
            keyboard = [
                [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞")],
                [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            success_count = 0
            for user_id in users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=tomorrow_schedule,
                        reply_markup=reply_markup
                    )
                    success_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    await asyncio.sleep(0.1)
                except TelegramError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –ë–î
                    if "bot was blocked" in str(e).lower():
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    async def check_upcoming_lessons(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            now = datetime.now()
            current_time = now.strftime("%H:%M")
            current_date = now.strftime("%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            subjects = schedule_manager.get_subjects_with_times(now)
            
            for subject in subjects:
                start_time = subject['start_time']
                subject_name = subject['name']
                room = subject['room']
                lesson_type = subject['type']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
                start_dt = datetime.strptime(start_time, "%H:%M")
                reminder_time = (start_dt - timedelta(minutes=10)).strftime("%H:%M")
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if current_time == reminder_time:
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                        f"–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è:\n"
                        f"üìö {subject_name}\n"
                        f"üè´ {room}\n"
                        f"üìù {lesson_type}\n"
                        f"‚è∞ {start_time}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    users = db.get_all_users()
                    success_count = 0
                    
                    for user_id in users:
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message
                            )
                            success_count += 1
                            await asyncio.sleep(0.1)
                        except TelegramError as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {subject_name} –≤ {start_time}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {e}")
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        if self.job_queue:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 21:00
            self.job_queue.run_daily(
                self.send_daily_schedule,
                time=datetime.strptime("21:00", "%H:%M").time(),
                name="daily_schedule"
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            self.job_queue.run_repeating(
                self.check_upcoming_lessons,
                interval=60,  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
                first=10,     # –ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                name="lesson_reminders"
            )
            
            logger.info("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")